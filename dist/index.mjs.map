{"version":3,"sources":["../src/format.ts","../src/style.ts","../src/file.ts","../src/index.ts"],"sourcesContent":["import dayjs from 'dayjs'\nimport {\n    stylizeLevelText,\n    stylizeServiceText,\n    stylizeEventText,\n    stylizeMessageText\n} from \"./style\"\n\nexport type LogData = {\n    level: string;\n    time: string;\n    service: string;\n    event: string;\n    message: string | string[];\n};\n\nconst defaultLevelText: Record<string, string> = {\n    debug: 'DEBUG',\n    info: 'INFO',\n    warn: 'WARN',\n    error: 'ERROR',\n    success: 'SUCCESS'\n};\nconst defaultLogFormat: Record<string, string> = {\n    time: 'YYYY-MM-DD HH:mm:ss',\n    fmt: '$l | $t | $s$e:$m'\n}\n\nlet levelText: Record<string, string> = { ...defaultLevelText };\nlet logFormat: Record<string, string> = { ...defaultLogFormat };\n\n/**\n * Customize the text for a specific log level if you want to\n * @param level\n * @param text \n */\nexport function setLevelText(level: string, text: string): void {\n    if (levelText[level] !== undefined) {\n        levelText[level] = text || defaultLevelText[level];\n    } else {\n        throw new Error(`Level ${level} not found`);\n    }\n}\n\n/**\n * Sets the log format\n * @param fmt \n * available variables:\n * - $l - log level\n * - $t - time\n * - $s - service\n * - $e - event\n * - $m - message\n */\nexport function setLogFormat(fmt: string): void {\n    if (fmt) {\n        logFormat.fmt = fmt;\n    }\n}\n\n/**\n * Set the time format for the log\n * @param fmt this follows the moment.js format \n */\nexport function setLogTimeFormat(fmt: string): void {\n    if (fmt) {\n        logFormat.time = fmt;\n    }\n}\n\n\n/**\n * Get current time\n * @param fmt \n * @returns \n */\nexport function getCurrentTime(fmt: string): string {\n    const format = fmt || defaultLogFormat.time;\n    return dayjs().format(format);\n}\n\n/**\n * Create log data\n * @param level \n * @param service \n * @param event \n * @param message \n * @returns \n */\nexport function createLogData(\n    level: string,\n    service: string, event: string,\n    message: string | string[]\n): LogData {\n    return {\n        level:      levelText[level.toLowerCase()] || \"_\",\n        time:       getCurrentTime(defaultLogFormat.time),\n        service:    service,\n        event:      event,\n        message:    message\n    };\n}\n\n/**\n * Format & stylize log data\n * @param fmt \n * @param logData \n * @returns  \n */\nexport function format(logData: LogData): string {\n    let _retfmt = logFormat.fmt || defaultLogFormat.fmt;\n    return _retfmt\n        .replace('$l', stylizeLevelText(logData.level, logData.level))\n        .replace('$t', logData.time)\n        .replace('$s', stylizeServiceText(logData.service))\n        .replace('$e', stylizeEventText(logData.event),)\n        .replace('$m', stylizeMessageText(logData.level, logData.message));\n}\n\nexport default {\n    setLevelText,\n    setLogFormat,\n    setLogTimeFormat,\n    getCurrentTime,\n    createLogData,\n    format\n};","import chalk, { ChalkInstance } from \"chalk\";\n\n// ====== Type Definitions ======\n\nexport type BaseTextStyle = {\n    color: ChalkInstance;\n    indent: number;\n    end: string;\n    start: string;\n};\n\nexport type LevelTextStyle   = BaseTextStyle;\nexport type ServiceTextStyle = BaseTextStyle;\nexport type EventTextStyle   = BaseTextStyle;\nexport type MessageTextStyle = BaseTextStyle;\n\n// ====== Defaults (Immutable) ======\n\nconst defaultLevelStyles: Record<string, LevelTextStyle> = {\n    info:    { color: chalk.cyanBright,    end: \"\", indent: 0, start: \"\" },\n    warn:    { color: chalk.yellowBright,  end: \"\", indent: 0, start: \"\" },\n    error:   { color: chalk.redBright,     end: \"\", indent: 0, start: \"\" },\n    success: { color: chalk.greenBright,   end: \"\", indent: 0, start: \"\" },\n    debug:   { color: chalk.gray,          end: \"\", indent: 0, start: \"\" },\n};\n\nconst defaultServiceStyles: ServiceTextStyle = {\n    color: chalk.blueBright,\n    end: \"\",\n    indent: 0,\n    start: \"\",\n};\n\nconst defaultEventStyles: EventTextStyle = {\n    color: chalk.magentaBright,\n    end: \"\",\n    indent: 0,\n    start: \" / \",\n};\n\nconst defaultMessageStyles: Record<string, MessageTextStyle> = {\n    info:    { color: chalk.cyan,    end: \"\",   indent: 0, start: \", \" },\n    warn:    { color: chalk.yellow,  end: \",\\n\", indent: 4, start: \"> \" },\n    error:   { color: chalk.red,     end: \",\\n\", indent: 4, start: \"> \" },\n    success: { color: chalk.green,   end: \"\",   indent: 0, start: \", \" },\n    debug:   { color: chalk.gray,    end: \",\\n\", indent: 4, start: \"\" },\n};\n\n// ====== Runtime Mutables ======\n\nlet levelStyles:    Record<string, LevelTextStyle> = { ...defaultLevelStyles };\nlet serviceStyle:   ServiceTextStyle = { ...defaultServiceStyles };\nlet eventStyle:     EventTextStyle = { ...defaultEventStyles };\nlet messageStyles:  Record<string, MessageTextStyle> = { ...defaultMessageStyles };\n\n// ====== STYLE FACTORY ======\n\n/**\n * Factory function to create a new text style\n */\nexport function createTextStyle(\n    color: ChalkInstance,\n    indent: number = 0,\n    start: string = \"\",\n    end: string = \"\"\n): BaseTextStyle {\n    return {\n        color: color,\n        indent: indent,\n        start: start,\n        end: end,\n    };\n}\n\n// ====== Setter Functions ======\n\n/**\n * \n * @param newStyles \n */\nexport function setLevelStyle(newStyles: Record<string, LevelTextStyle>): void {\n    for (const key in newStyles) {\n        levelStyles[key] = {\n            ...levelStyles[key],\n            ...newStyles[key],\n        };\n    }\n}\n\nexport function setServiceStyle(style: Partial<ServiceTextStyle>): void {\n    Object.assign(serviceStyle, style);\n}\n\nexport function setEventStyle(style: Partial<EventTextStyle>): void {\n    Object.assign(eventStyle, style);\n}\n\nexport function setMessageStyle(newStyles: Record<string, MessageTextStyle>): void {\n    for (const key in newStyles) {\n        messageStyles[key] = {\n            ...messageStyles[key],\n            ...newStyles[key],\n        };\n    }\n}\n\n// ====== Restore Function ======\n\nexport function restoreLevelStylesToDefault(): void {\n    levelStyles = { ...defaultLevelStyles };\n}\n\nexport function restoreServiceStyleToDefault(): void {\n    serviceStyle = { ...defaultServiceStyles };\n}\n\nexport function restoreEventStyleToDefault(): void {\n    eventStyle = { ...defaultEventStyles };\n}\n\nexport function restoreMessageStylesToDefault(): void {\n    messageStyles = { ...defaultMessageStyles };\n}\n\nexport function restoreAllStylesToDefault(): void {\n    restoreLevelStylesToDefault();\n    restoreServiceStyleToDefault();\n    restoreEventStyleToDefault();\n    restoreMessageStylesToDefault();\n}\n\n// ====== Getter Functions ======\n\nexport function getLevelStyle(level: string): LevelTextStyle {\n    const _level: string = level.toLowerCase();\n    return levelStyles[_level] || {color: chalk.white, end: \"\", indent: 0, start: \"\"};\n}\n\nexport function getServiceStyle(): ServiceTextStyle {\n    return serviceStyle || defaultServiceStyles;\n}\n\nexport function getEventStyle(): EventTextStyle {\n    return eventStyle || defaultEventStyles;\n}\n\nexport function getMessageStyle(level: string): MessageTextStyle {\n    return messageStyles[level] || {color: chalk.white, end: \"\", indent: 0, start: \"\"};\n}\n\n// ====== Debug Functions ======\n\nexport function printStyleAttributes(style: BaseTextStyle): void {\n    console.log(\"style Attributes:\");\n    console.log(\"  color: \", style.color(\"sample\"));\n    console.log(\"  indent:\", style.indent);\n    console.log(\"  start: \", JSON.stringify(style.start));\n    console.log(\"  end:   \", JSON.stringify(style.end));\n}\n\n// ====== Stylize Functions ======\n\nfunction stylizeText(\n    text: string | string[], style: BaseTextStyle,\n    colorizeStart: boolean = false,\n    colorizeEnd: boolean = false\n): string {\n    const _start = colorizeStart ? style.color(style.start): style.start;\n    const _end = colorizeEnd ? style.color(style.end): style.end;\n\n    if (Array.isArray(text)) {\n        return text.map((t) => `${' '.repeat(style.indent)}${_start}${style.color(t)}`).join(`${_end}`);\n    }\n    return `${' '.repeat(style.indent)}${_start}${style.color(text)}${_end}`;\n}\n\nexport function stylizeLevelText(\n    level: string, text: string | string[],\n    colorizeStart: boolean = false,\n    colorizeEnd: boolean = false\n): string {\n    const style = getLevelStyle(level);\n    return stylizeText(text, style, colorizeStart, colorizeEnd);\n}\n\nexport function stylizeServiceText(\n    text: string | string[],\n    colorizeStart: boolean = false,\n    colorizeEnd: boolean = false\n): string {\n    return stylizeText(text, serviceStyle, colorizeStart, colorizeEnd);\n}\n\nexport function stylizeEventText(\n    text: string | string[],\n    colorizeStart: boolean = false,\n    colorizeEnd: boolean = false\n): string {\n    return stylizeText(text, eventStyle, colorizeStart, colorizeEnd);\n}\n\nexport function stylizeMessageText(\n    level: string, text: string | string[],\n    colorizeStart: boolean = false,\n    colorizeEnd: boolean = false\n): string {\n    const style = getMessageStyle(level);\n    return stylizeText(text, style, colorizeStart, colorizeEnd);\n}\n\nexport default {\n    createTextStyle,\n    setLevelStyle,\n    setServiceStyle,\n    setEventStyle,\n    setMessageStyle,\n    restoreLevelStylesToDefault,\n    restoreServiceStyleToDefault,\n    restoreEventStyleToDefault,\n    restoreMessageStylesToDefault,\n    restoreAllStylesToDefault,\n    getLevelStyle,\n    getServiceStyle,\n    getEventStyle,\n    getMessageStyle,\n    printStyleAttributes,\n    stylizeLevelText,\n    stylizeServiceText,\n    stylizeEventText,\n    stylizeMessageText\n};","import chalk from \"chalk\";\n\nconst defaultFilePath: string = './logs/latest.log';\nlet allowWriteFile: boolean = false;\n\n/**\n * Set the allowWriteFile flag\n * @param value - if true, allow logger to write reports to file\n * @returns void\n */\nexport function setAllowToWriteFile(value: boolean): void {\n    allowWriteFile = value;\n}\n\n/**\n * Get the value of allowWriteFile flag\n * @returns boolean\n */\nexport function isAllowToWriteFile(): boolean {\n    return allowWriteFile;\n}\n\n/**\n * Write log data to a file\n * @param filePath - the path to the file\n * @param data - the log data to write\n */\nexport function writeToFile(filePath: string | null | undefined, data: string): void {\n    if (allowWriteFile) {\n        const fs = require('fs');\n        const path = require('path');\n\n        fs.appendFileSync(filePath || defaultFilePath, data + '\\n', 'utf8');\n    } else {\n        const minlogText = `minlog-js: \"${chalk.yellowBright.bold(\"allowWriteFile\")}\" is \"false\". Use \"${chalk.yellowBright.bold(\"setAllowToWriteFile(true)\")}\" to enable file writing.`;\n        console.log(`${chalk.gray.bold(minlogText)}\\n${chalk.gray.bold(\"Log not written to file\")}`);\n    }\n}\n\nexport default {\n    setAllowToWriteFile,\n    isAllowToWriteFile,\n    writeToFile\n};","import * as format from './format'\nimport * as file from './file'\nimport * as style from './style'\n\n\nfunction minlog(log: format.LogData): void {\n    const data: string = format.format(log);\n    console.log(data);\n    if (file.isAllowToWriteFile()) {\n        file.writeToFile(\"\", data);\n    }\n}\n\nexport {\n    minlog,\n    format,\n    file,\n    style\n};\n\nexport default {\n    minlog,\n    format,\n    file,\n    style\n};"],"mappings":"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","names":["format","chalk"]}